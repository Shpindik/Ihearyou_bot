"""–†–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Telegram Bot API."""

from __future__ import annotations

import os
from datetime import datetime, timedelta, timezone
from typing import List, Optional

from sqlalchemy.ext.asyncio import AsyncSession
from telegram import Bot
from telegram.error import BadRequest, Forbidden, NetworkError, TelegramError, TimedOut

from backend.crud import notification_crud, telegram_user_crud
from backend.schemas.admin.notification import (
    AdminNotificationListResponse,
    AdminNotificationRequest,
    AdminNotificationResponse,
    AdminNotificationUpdate,
)
from backend.validators.notification import notification_validator


class NotificationService:
    """–†–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Telegram Bot API."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å Telegram Bot."""
        self.bot_token = os.getenv("BOT_TOKEN")
        if not self.bot_token:
            raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.bot = Bot(token=self.bot_token)
        self.validator = notification_validator

    async def find_inactive_users(self, db: AsyncSession, inactive_days: int = 10) -> List:
        """–ù–∞–π—Ç–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        return await telegram_user_crud.get_inactive_users(db, inactive_days)

    async def create_reminder_notifications(self, db: AsyncSession, users: List) -> int:
        """–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤."""
        from backend.services.reminder_template import reminder_template_service

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        template = await reminder_template_service.get_default_template(db)

        count = 0
        for user in users:
            if template:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π
                message = reminder_template_service.personalize_message(template.message_template, user.first_name)
                await notification_crud.create_notification(
                    db=db, telegram_user_id=user.id, message=message, template_id=template.id
                )
            else:
                # Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ—Ç
                message = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –ú—ã –ø–æ –≤–∞–º —Å–æ—Å–∫—É—á–∏–ª–∏—Å—å! ü•∞"
                await notification_crud.create_notification(db=db, telegram_user_id=user.id, message=message)
            count += 1
        return count

    async def send_pending_notifications(self, db: AsyncSession) -> dict:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        notifications = await notification_crud.get_pending_notifications(db)

        sent = 0
        failed = 0

        for notification in notifications:
            try:
                # –†–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
                success = await self._send_telegram_message(notification.telegram_user_id, notification.message)

                if success:
                    await notification_crud.mark_as_sent(db, notification.id)
                    sent += 1
                else:
                    await notification_crud.mark_as_failed(db, notification.id)
                    failed += 1

            except Exception:
                await notification_crud.mark_as_failed(db, notification.id)
                failed += 1

        return {"total": len(notifications), "sent": sent, "failed": failed}

    async def _send_telegram_message(self, telegram_user_id: int, message: str) -> bool:
        """–†–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram Bot API.

        Args:
            telegram_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏

        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            await self.bot.send_message(chat_id=telegram_user_id, text=message, parse_mode="HTML")
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_user_id}")
            return True

        except BadRequest as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {telegram_user_id}: {e}")
            return False

        except Forbidden as e:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞: {e}")
            return False

        except NetworkError as e:
            print(f"‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {telegram_user_id}: {e}")
            return False

        except TimedOut as e:
            print(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {telegram_user_id}: {e}")
            return False

        except Forbidden:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ {telegram_user_id}")
            return False

        except TelegramError as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {telegram_user_id}: {e}")
            return False

        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {telegram_user_id}: {e}")
            return False

    async def send_admin_notification(
        self, db: AsyncSession, request: AdminNotificationRequest
    ) -> AdminNotificationResponse:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        user = await telegram_user_crud.get_by_telegram_id(db, request.telegram_user_id)
        self.validator.validate_user_exists_for_id(user, request.telegram_user_id)

        notification = await notification_crud.create_notification(
            db=db,
            telegram_user_id=user.id,
            message=request.message,
        )

        # –†–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram Bot API
        success = await self._send_telegram_message(user.telegram_id, request.message)

        if success:
            await notification_crud.mark_as_sent(db, notification.id)
            await telegram_user_crud.update_reminder_sent_status(db, user.id)

        return AdminNotificationResponse.model_validate(notification)

    async def get_admin_notifications(
        self, db: AsyncSession, days_ago: Optional[int] = None
    ) -> AdminNotificationListResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."""
        start_date = None
        if days_ago:
            start_date = datetime.now(timezone.utc) - timedelta(days=days_ago)

        stats = await notification_crud.get_notification_statistics(db, start_date)

        return AdminNotificationListResponse(
            total_notifications=stats["total"],
            sent_notifications=stats["sent"],
            failed_notifications=stats["failed"],
            pending_notifications=stats["pending"],
            success_rate=stats["success_rate"],
        )

    async def update_admin_notification(
        self, db: AsyncSession, notification_id: int, request: AdminNotificationUpdate
    ) -> AdminNotificationResponse:
        """–û–±–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
        notification = await notification_crud.get(db, notification_id)
        self.validator.validate_notification_exists_for_id(notification, notification_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if request.status == "sent":
            await notification_crud.mark_as_sent(db, notification_id)
        elif request.status == "failed":
            await notification_crud.mark_as_failed(db, notification_id)

        updated_notification = await notification_crud.get(db, notification_id)
        return AdminNotificationResponse.model_validate(updated_notification)


notification_service = NotificationService()
