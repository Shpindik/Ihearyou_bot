"""–†–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Telegram Bot API."""

from __future__ import annotations

from datetime import datetime, timedelta, timezone
from typing import List, Optional

from sqlalchemy.ext.asyncio import AsyncSession

from backend.crud import notification_crud, telegram_user_crud
from backend.schemas.admin.notification import (
    AdminNotificationListResponse,
    AdminNotificationRequest,
    AdminNotificationResponse,
    AdminNotificationUpdate,
)
from backend.services.message_template import message_template_service
from backend.validators.notification import notification_validator


class NotificationService:
    """–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≤ –ë–î (–æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ –±–æ—Ç –≤ scheduler_tasks.py)."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏."""
        self.validator = notification_validator

    async def find_inactive_users(self, db: AsyncSession, inactive_days: int = 10) -> List:
        """–ù–∞–π—Ç–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        return await telegram_user_crud.get_inactive_users(db, inactive_days)

    async def create_reminder_notifications(self, db: AsyncSession, users: List) -> int:
        """–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤."""
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        template = await message_template_service.get_default_template(db)

        count = 0
        for user in users:
            if template:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π
                message = message_template_service.personalize_message(template.message_template, user.first_name)
                await notification_crud.create_notification(
                    db=db, telegram_user_id=user.id, message=message, template_id=template.id
                )
            else:
                # Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ—Ç
                message = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –ú—ã –ø–æ –≤–∞–º —Å–æ—Å–∫—É—á–∏–ª–∏—Å—å! ü•∞"
                await notification_crud.create_notification(db=db, telegram_user_id=user.id, message=message)
            count += 1
        return count

    async def send_pending_notifications(self, db: AsyncSession) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ—Ç–æ–º.

        –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –±–æ—Ç!
        –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å —Ç–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–º–∏ –≤ –ë–î.
        """
        notifications = await notification_crud.get_pending_notifications(db)
        return {"total": len(notifications), "pending_notifications": notifications}

    async def send_admin_notification(
        self, db: AsyncSession, request: AdminNotificationRequest
    ) -> AdminNotificationResponse:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        user = await telegram_user_crud.get_by_telegram_id(db, request.telegram_user_id)
        self.validator.validate_user_exists_for_id(user, request.telegram_user_id)

        notification = await notification_crud.create_notification(
            db=db,
            telegram_user_id=user.id,
            message=request.message,
        )

        print(f"üìù –ê–¥–º–∏–Ω—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
        await telegram_user_crud.update_reminder_sent_status(db, telegram_user_id=user.id)

        return AdminNotificationResponse.model_validate(notification.__dict__)

    async def get_admin_notifications(
        self, db: AsyncSession, days_ago: Optional[int] = None
    ) -> AdminNotificationListResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."""
        start_date = None
        if days_ago:
            start_date = datetime.now(timezone.utc) - timedelta(days=days_ago)

        stats = await notification_crud.get_notification_statistics(db, start_date)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è admin –ø–∞–Ω–µ–ª–∏
        notifications = await notification_crud.get_admin_notifications(db, start_date)

        return AdminNotificationListResponse(
            items=notifications,
            total=stats["total"],
            page=1,
            limit=100,  # –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            pages=1,
        )

    async def update_admin_notification(
        self, db: AsyncSession, notification_id: int, request: AdminNotificationUpdate
    ) -> AdminNotificationResponse:
        """–û–±–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
        notification = await notification_crud.get(db, notification_id)
        self.validator.validate_notification_exists_for_id(notification, notification_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if request.status == "sent":
            await notification_crud.mark_as_sent(db, notification_id)
        elif request.status == "failed":
            await notification_crud.mark_as_failed(db, notification_id)

        updated_notification = await notification_crud.get(db, notification_id)
        return AdminNotificationResponse.model_validate(updated_notification.__dict__)

    async def delete_admin_notification(self, db: AsyncSession, notification_id: int) -> None:
        """–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
        notification = await notification_crud.get(db, notification_id)
        self.validator.validate_notification_exists_for_id(notification, notification_id)

        await notification_crud.delete(db, notification_id)

    async def get_notification_statistics(self, db: AsyncSession) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        stats = await notification_crud.get_notification_statistics(db)
        return stats


notification_service = NotificationService()
