"""–ü—Ä–æ—Å—Ç–æ–π CRUD –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π - MVP –≤–µ—Ä—Å–∏—è."""

from __future__ import annotations

from typing import List, Optional

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from backend.models import ReminderTemplate

from .base import BaseCRUD


class ReminderTemplateCRUD(BaseCRUD[ReminderTemplate, dict, dict]):
    """–ü—Ä–æ—Å—Ç–æ–π CRUD –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CRUD –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤."""
        super().__init__(ReminderTemplate)

    async def get_active_templates(self, db: AsyncSession) -> List[ReminderTemplate]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã."""
        query = select(ReminderTemplate).where(ReminderTemplate.is_active)
        result = await db.execute(query)
        return result.scalars().all()

    async def get_default_template(self, db: AsyncSession) -> Optional[ReminderTemplate]:
        """–ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        templates = await self.get_active_templates(db)
        return templates[0] if templates else None

    async def create_default_template(self, db: AsyncSession) -> ReminderTemplate:
        """–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        template_data = {
            "name": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏",
            "message_template": "–ü—Ä–∏–≤–µ—Ç, {first_name}! –ú—ã –ø–æ –≤–∞–º —Å–æ—Å–∫—É—á–∏–ª–∏—Å—å! –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –Ω–∞–º ü•∞",
            "is_active": True,
        }
        return await self.create(db, template_data)


reminder_template_crud = ReminderTemplateCRUD()
