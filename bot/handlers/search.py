"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º."""

import logging
from typing import Any, Dict, List

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext

from ..config import settings
from ..services.menu_service import MenuService
from ..services.user_activity_service import UserActivityService
from ..utils.keyboards import (
    create_back_menu_keyboard,
    create_search_pagination_keyboard,
    create_search_results_keyboard,
)
from .start import UserStates


logger = logging.getLogger(__name__)

router = Router()
menu_service = MenuService()
activity_service = UserActivityService()


@router.callback_query(F.data == "search")
@router.callback_query(F.data.startswith("search_page_"))
async def search_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º telegram_user_id –∏–∑ —Å–æ–±—ã—Ç–∏—è
        telegram_user_id = callback.from_user.id

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
        if callback.data.startswith("search_page_"):
            page = int(callback.data.split("_")[-1])
            state_data = await state.get_data()
            search_query = state_data.get("search_query")

            if not search_query:
                await callback.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∏", show_alert=True)
                return
        else:
            # –ù–æ–≤—ã–π –ø–æ–∏—Å–∫ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            await callback.message.edit_text(
                text="üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:\n\n" "–ù–∞–ø—Ä–∏–º–µ—Ä: —Å–ª—É—Ö–æ–≤—ã–µ –∞–ø–ø–∞—Ä–∞—Ç—ã, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞, —Ä–∞–∑–≤–∏—Ç–∏–µ —Ä–µ—á–∏",
                parse_mode=settings.parse_mode,
            )

            await state.set_state(UserStates.search_waiting)
            await callback.answer()
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        await perform_search(callback, telegram_user_id, search_query, page)

    except Exception as e:
        logger.error(f"Error in search_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(F.text, lambda message: len(message.text) >= 2)
async def search_text_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º telegram_user_id –∏–∑ —Å–æ–±—ã—Ç–∏—è
        telegram_user_id = message.from_user.id

        current_state = await state.get_state()

        if current_state != UserStates.search_waiting:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–∏—Å–∫–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            return

        search_query = message.text.strip()

        if len(search_query) < 2:
            await message.answer("–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞
        await state.update_data(search_query=search_query)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        await perform_text_search(message, telegram_user_id, search_query)

    except Exception as e:
        logger.error(f"Error in search_text_handler: {e}")
        await message.answer(settings.error_message)


@router.callback_query(F.data.startswith("search_result_"))
async def search_result_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º telegram_user_id –∏–∑ —Å–æ–±—ã—Ç–∏—è
        telegram_user_id = callback.from_user.id

        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞
        menu_item_id = int(callback.data.split("_")[2])

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        menu_content = await menu_service.get_menu_content(telegram_user_id, menu_item_id)

        if not menu_content:
            await callback.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        success = await menu_service.send_content_user(menu_content, callback)

        if success:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π
            from ..utils.keyboards import create_content_actions_keyboard

            keyboard = create_content_actions_keyboard(menu_item_id)

            await callback.message.edit_reply_markup(reply_markup=keyboard)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(UserStates.content_view)
            await state.update_data(
                viewed_content_id=menu_item_id, content_title=menu_content.get("title", "–ú–∞—Ç–µ—Ä–∏–∞–ª"), from_search=True
            )

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            await activity_service.log_content_view(
                telegram_user_id, menu_item_id, menu_content.get("title", "Unknown")
            )

        await callback.answer()

    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    except Exception as e:
        logger.error(f"Error in search_result_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def perform_search(callback: types.CallbackQuery, telegram_user_id: int, search_query: str, page: int = 1):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
    try:
        # –í—ã–∑—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ API
        search_results = await menu_service.search_materials(telegram_user_id, search_query, limit=5, page=page)

        if not search_results:
            await callback.message.edit_text(
                text=f"üòî –ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{search_query}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã.",
                reply_markup=create_back_menu_keyboard(),
                parse_mode=settings.parse_mode,
            )
            await callback.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        await activity_service.log_search(telegram_user_id, search_query)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        await send_search_results(callback, search_query, search_results, page)

        await callback.answer()

    except Exception as e:
        logger.error(f"Error performing search: {e}")
        await callback.message.edit_text(
            text="üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_back_menu_keyboard(),
            parse_mode=settings.parse_mode,
        )


async def perform_text_search(message: types.Message, telegram_user_id: int, search_query: str):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É."""
    try:
        # –í—ã–∑—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ API
        search_results = await menu_service.search_materials(telegram_user_id, search_query, limit=5, page=1)

        if not search_results:
            await message.answer(
                text=f"üòî –ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{search_query}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã.",
                parse_mode=settings.parse_mode,
            )
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        await activity_service.log_search(telegram_user_id, search_query)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        await send_text_search_results(message, search_query, search_results)

    except Exception as e:
        logger.error(f"Error performing text search: {e}")
        await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def send_search_results(
    callback: types.CallbackQuery, search_query: str, results: List[Dict[str, Any]], current_page: int
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ callback."""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_results = len(results)
    total_pages = (total_results + 4) // 5  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö

    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ ¬´{search_query}¬ª:\n\n"

    start_index = (current_page - 1) * 5
    end_index = min(start_index + 5, total_results)

    for i in range(start_index, end_index):
        result = results[i]
        message_text += f"{i + 1}. {result['title']}\n"

        if result.get("description"):
            description = result["description"][:100]
            message_text += f"   {description}{'...' if len(result['description']) > 100 else ''}\n"
        message_text += "\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    keyboard = create_search_results_keyboard(results[start_index:end_index])

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if total_pages > 1:
        keyboard = create_search_pagination_keyboard(current_page, total_pages, search_query, keyboard)

    await callback.message.edit_text(
        text=message_text,
        reply_markup=keyboard,
        parse_mode=settings.parse_mode,
        disable_web_page_preview=settings.disable_web_page_preview,
    )


async def send_text_search_results(message: types.Message, search_query: str, results: List[Dict[str, Any]]):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ ¬´{search_query}¬ª:\n\n"

    for i, result in enumerate(results[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        message_text += f"{i}. {result['title']}\n"

        if result.get("description"):
            description = result["description"][:100]
            message_text += f"   {description}{'...' if len(result['description']) > 100 else ''}\n"
        message_text += "\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    keyboard = create_search_results_keyboard(results[:5])

    await message.answer(
        text=message_text,
        reply_markup=keyboard,
        parse_mode=settings.parse_mode,
        disable_web_page_preview=settings.disable_web_page_preview,
    )
