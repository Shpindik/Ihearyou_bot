"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

import logging

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext

from ..config import settings
from ..services.question_service import QuestionService
from ..services.user_activity_service import UserActivityService
from ..utils.keyboards import create_back_menu_keyboard
from .start import UserStates


logger = logging.getLogger(__name__)

router = Router()
question_service = QuestionService()
activity_service = UserActivityService()


@router.callback_query(F.data == "ask_question")
async def ask_question_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞."""
    try:
        await state.set_state(UserStates.question_input)

        message_text = (
            "‚ùì –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:\n\n"
            "–ú—ã –ø–æ–Ω–∏–º–∞–µ–º, —á—Ç–æ —É –≤–∞—Å –º–æ–≥—É—Ç –±—ã—Ç—å –≤–∞–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–ª—É—Ö–µ –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ "
            "–∏–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º —Å–ª—É—Ö–µ. –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, "
            "–∏ –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç—è—Ç.\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å (–¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤):\n"
            "‚¨ÖÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")
        
        keyboard = builder.as_markup()

        await callback.message.edit_text(
            text=message_text,
            parse_mode=settings.parse_mode,
            reply_markup=keyboard,
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"Error in ask_question_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(F.text, lambda message: len(message.text) >= 10)
async def question_input_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º telegram_user_id –∏–∑ —Å–æ–±—ã—Ç–∏—è
        telegram_user_id = message.from_user.id
        
        current_state = await state.get_state()

        if current_state != UserStates.question_input:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            return

        question_text = message.text.strip()

        if len(question_text) < 10:
            await message.answer(
                "üìù –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ " "(–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤).",
                parse_mode=settings.parse_mode,
            )
            return

        if len(question_text) > 2000:
            await message.answer(
                "üìù –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ " "–¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤.",
                parse_mode=settings.parse_mode,
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–∞ (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        if not is_valid_question_text(question_text):
            await message.answer(
                "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å. "
                "–ò–∑–±–µ–≥–∞–π—Ç–µ –∏–∑–±—ã—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤.",
                parse_mode=settings.parse_mode,
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ API
        question_data = await question_service.submit_question(
            telegram_user_id=telegram_user_id, question_text=question_text
        )

        if question_data:
            # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            await activity_service.log_question_ask(telegram_user_id)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirmation_text = (
                "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
                "üì® –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ "
                "–æ—Ç–≤–µ—Ç—è—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!\n\n"
                "üîÑ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã, –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –∏—Ö —á–µ—Ä–µ–∑ "
                "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é."
            )

            keyboard = create_back_menu_keyboard()
            await message.answer(
                text=confirmation_text, parse_mode=settings.parse_mode, reply_markup=keyboard
            )

            await state.clear()
            await state.set_state(UserStates.main_menu)  # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

        else:
            keyboard = create_back_menu_keyboard()
            await message.answer(
                text="üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode=settings.parse_mode,
                reply_markup=keyboard,
            )
            await state.set_state(UserStates.main_menu)

    except Exception as e:
        logger.error(f"Error in question_input_handler: {e}")
        keyboard = create_back_menu_keyboard()
        await message.answer(
            text=settings.error_message, 
            parse_mode=settings.parse_mode,
            reply_markup=keyboard
        )
        await state.set_state(UserStates.main_menu)


@router.message(F.text, lambda message: len(message.text) < 10)
async def short_question_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞."""
    current_state = await state.get_state()

    if current_state == UserStates.question_input:
        await message.answer(
            "üìù –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤).",
            parse_mode=settings.parse_mode,
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = create_back_menu_keyboard()
        await message.answer(
            "üìù –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            parse_mode=settings.parse_mode,
            reply_markup=keyboard
        )
        await state.set_state(UserStates.main_menu)


@router.message(F.text.startswith("/start"))
async def start_command_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞."""
    await state.clear()
    await state.set_state(UserStates.main_menu)
    
    from ..utils.keyboards import create_main_menu_keyboard
    keyboard = create_main_menu_keyboard()
    
    await message.answer(
        text=settings.welcome_message,
        parse_mode=settings.parse_mode,
        reply_markup=keyboard,
        disable_web_page_preview=settings.disable_web_page_preview,
    )


def is_valid_question_text(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞.

    Args:
        text: –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞

    Returns:
        True –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –≤–∞–ª–∏–¥–µ–Ω
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤
    if len(set(text.replace(" ", ""))) < 3:
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω—ã
    spam_patterns = ["aaaa", "bbbb", "—ç—ç—ç—ç", "–µ–µ–µ–µ"]
    text_lower = text.lower()

    for pattern in spam_patterns:
        if pattern in text_lower:
            return False

    return True

