"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ü–µ–Ω–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤."""

import asyncio
import logging

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext

from ..config import settings
from ..services.rating_service import RatingService
from ..services.user_activity_service import UserActivityService
from ..utils.keyboards import create_back_menu_keyboard, create_rating_keyboard
from .start import UserStates


logger = logging.getLogger(__name__)

router = Router()
rating_service = RatingService()
activity_service = UserActivityService()


@router.callback_query(F.data.startswith("content_rating_"))
async def rating_request_handler(callback: types.CallbackQuery, state: FSMContext, telegram_user_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ü–µ–Ω–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞."""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
        menu_item_id = int(callback.data.split("_")[2])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        await state.set_state(UserStates.rating_waiting)
        await state.update_data(rating_menu_id=menu_item_id)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        menu_item_info = await rating_service.get_menu_item_info(menu_item_id, telegram_user_id)

        if not menu_item_info:
            await callback.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        title = menu_item_info.get("title", "–úaterial")

        message_text = (
            f"‚≠ê –û—Ü–µ–Ω–∏—Ç–µ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–∞ ¬´{title}¬ª:\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥:\n"
            f"1 ‚≠ê - –ù–µ –ø–æ–ª–µ–∑–µ–Ω\n"
            f"2 ‚≠ê‚≠ê - –ú–∞–ª–æ –ø–æ–ª–µ–∑–µ–Ω\n"
            f"3 ‚≠ê‚≠ê‚≠ê - –£–º–µ—Ä–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–µ–Ω\n"
            f"4 ‚≠ê‚≠ê‚≠ê‚≠ê - –û—á–µ–Ω—å –ø–æ–ª–µ–∑–µ–Ω\n"
            f"5 ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê - –ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª–µ–∑–µ–Ω"
        )

        keyboard = create_rating_keyboard()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
        keyboard = add_cancel_button_to_keyboard(keyboard, f"content_menu_{menu_item_id}")

        await callback.message.edit_text(text=message_text, reply_markup=keyboard, parse_mode=settings.parse_mode)

        await callback.answer()

    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    except Exception as e:
        logger.error(f"Error in rating_request_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("rate_"))
async def rating_submit_handler(callback: types.CallbackQuery, state: FSMContext, telegram_user_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ü–µ–Ω–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞."""
    try:
        current_state = await state.get_state()

        if current_state != UserStates.rating_waiting:
            await callback.answer("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ—Ü–µ–Ω–∫–∏", show_alert=True)
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        rating = int(callback.data.split("_")[1])

        if not (1 <= rating <= 5):
            await callback.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
        state_data = await state.get_data()
        menu_item_id = state_data.get("rating_menu_id")

        if not menu_item_id:
            await callback.answer("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞", show_alert=True)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ API
        success = await rating_service.submit_rating(
            telegram_user_id=telegram_user_id, menu_item_id=menu_item_id, rating=rating
        )

        if success:
            # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            await activity_service.log_rating(telegram_user_id, menu_item_id, rating)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            rating_words = {
                1: "–ù–µ –ø–æ–ª–µ–∑–µ–Ω",
                2: "–ú–∞–ª–æ –ø–æ–ª–µ–∑–µ–Ω",
                3: "–£–º–µ—Ä–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–µ–Ω",
                4: "–û—á–µ–Ω—å –ø–æ–ª–µ–∑–µ–Ω",
                5: "–ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª–µ–∑–µ–Ω",
            }

            confirmation_text = (
                f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!\n\n"
                f"–ú–∞—Ç–µ—Ä–∏–∞–ª –æ—Ü–µ–Ω–µ–Ω –∫–∞–∫: {rating_words[rating]}\n\n"
                f"–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤."
            )

            await callback.message.edit_text(text=confirmation_text, parse_mode=settings.parse_mode)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–ª–∏ –º–µ–Ω—é
            await asyncio.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            from ..utils.keyboards import create_content_actions_keyboard

            keyboard = create_content_actions_keyboard(menu_item_id)

            await callback.message.edit_text(
                text=f"üìÑ –ú–∞—Ç–µ—Ä–∏–∞–ª: {state_data.get('content_title', '–û–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞')}",
                reply_markup=keyboard,
                parse_mode=settings.parse_mode,
            )

            await state.set_state(UserStates.content_view)

        else:
            await callback.message.edit_text(
                text="üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=create_back_menu_keyboard(),
                parse_mode=settings.parse_mode,
            )

        await callback.answer()

    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞", show_alert=True)
    except Exception as e:
        logger.error(f"Error in rating_submit_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


def add_cancel_button_to_keyboard(keyboard, cancel_callback: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ."""
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫
    keyboard_rows = keyboard.inline_keyboard.copy()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    cancel_row = [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=cancel_callback)]

    keyboard_rows.append(cancel_row)

    return types.InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
