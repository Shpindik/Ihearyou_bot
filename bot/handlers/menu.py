"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é."""

import logging

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext

from ..config import settings
from ..services.menu_service import MenuService
from ..services.user_activity_service import UserActivityService
from ..utils.keyboards import create_content_actions_keyboard, create_menu_keyboard
from .start import UserStates


logger = logging.getLogger(__name__)

router = Router()
menu_service = MenuService()
activity_adviser = UserActivityService()


@router.callback_query(F.data.startswith("menu_"))
async def menu_navigation_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º telegram_user_id –∏–∑ —Å–æ–±—ã—Ç–∏—è
        telegram_user_id = callback.from_user.id

        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
        menu_item_id = int(callback.data.split("_")[1])

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
        menu_content = await menu_service.get_menu_content(telegram_user_id, menu_item_id)

        if not menu_content:
            await callback.answer("–ü—É–Ω–∫—Ç –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        item_type = menu_content.get("item_type")
        logger.debug(f"Menu item {menu_item_id} has type: {item_type}, content: {menu_content}")

        if item_type == "navigation":
            # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            children = menu_content.get("children", [])

            if children:
                keyboard = create_menu_keyboard(children)

                message_text = menu_content.get("bot_message", "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:")

                await callback.message.edit_text(
                    text=message_text,
                    reply_markup=keyboard,
                    parse_mode=settings.parse_mode,
                    disable_web_page_preview=settings.disable_web_page_preview,
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                await state.set_state(UserStates.menu_navigation)
                await state.update_data(current_parent=menu_item_id, parent_id=menu_content.get("parent_id"))

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                await activity_adviser.log_menu_navigation(telegram_user_id, menu_item_id)

            else:
                await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤", show_alert=True)

        elif item_type == "content":
            # –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π –ø—É–Ω–∫—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            success = await menu_service.send_content_user(menu_content, callback)

            if success:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                keyboard = create_content_actions_keyboard(menu_item_id)

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                await callback.message.edit_reply_markup(reply_markup=keyboard)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                await state.set_state(UserStates.content_view)
                await state.update_data(
                    viewed_content_id=menu_item_id, content_title=menu_content.get("title", "–ú–∞—Ç–µ—Ä–∏–∞–ª")
                )

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                await activity_adviser.log_content_view(
                    telegram_user_id, menu_item_id, menu_content.get("title", "Unknown")
                )

                await callback.answer()
            else:
                await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", show_alert=True)
        else:
            # –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –∫–æ–Ω—Ç–µ–Ω—Ç
            logger.warning(f"Unknown menu item type: {item_type} for item {menu_item_id}")
            success = await menu_service.send_content_user(menu_content, callback)
            
            if success:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                keyboard = create_content_actions_keyboard(menu_item_id)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                await callback.message.edit_reply_markup(reply_markup=keyboard)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                await state.set_state(UserStates.content_view)
                await state.update_data(
                    viewed_content_id=menu_item_id, content_title=menu_content.get("title", "–ú–∞—Ç–µ—Ä–∏–∞–ª")
                )
                
                await callback.answer()
            else:
                await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é", show_alert=True)

    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    except Exception as e:
        logger.error(f"Error in menu_navigation_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("content_menu_"))
async def content_menu_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º telegram_user_id –∏–∑ —Å–æ–±—ã—Ç–∏—è
        telegram_user_id = callback.from_user.id

        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_id = int(callback.data.split("_")[2])

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—É–Ω–∫—Ç–∞
        menu_content = await menu_service.get_menu_content(telegram_user_id, content_id)

        if not menu_content:
            await callback.answer("–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        parent_id = menu_content.get("parent_id")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é
        menu_items = await menu_service.get_menu_items(telegram_user_id, parent_id)

        if menu_items:
            keyboard = create_menu_keyboard(menu_items)

            message_text = "üìÅ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –Ω—É–∂–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª—É:"

            await callback.message.edit_text(
                text=message_text,
                reply_markup=keyboard,
                parse_mode=settings.parse_mode,
                disable_web_page_preview=settings.disable_web_page_preview,
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(UserStates.menu_navigation)
            await state.update_data(current_parent=content_id, parent_id=parent_id)

        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ–Ω—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—É—Ç–∏
            from ..utils.keyboards import create_main_menu_keyboard

            await callback.message.edit_text(
                text=settings.welcome_message,
                reply_markup=create_main_menu_keyboard(),
                parse_mode=settings.parse_mode,
                disable_web_page_preview=settings.disable_web_page_preview,
            )
            await state.set_state(UserStates.main_menu)

        await callback.answer()

    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    except Exception as e:
        logger.error(f"Error in content_menu_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
