"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""

import logging

from aiogram import F, Router, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from ..config import settings
from ..services.menu_service import MenuService
from ..utils.api_client import APIClientError
from ..utils.keyboards import create_main_menu_keyboard, create_menu_keyboard


logger = logging.getLogger(__name__)


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class UserStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ FSM."""

    main_menu = State()  # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    selected_path = State()  # –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É—Ç—å (—Ä–µ–±–µ–Ω–æ–∫/–≤–∑—Ä–æ—Å–ª—ã–π)
    menu_navigation = State()  # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é
    content_view = State()  # –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    search_waiting = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    question_input = State()  # –í–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞
    rating_waiting = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()
menu_service = MenuService()


@router.message(CommandStart())
@router.callback_query(F.data == "home")
async def start_handler(message_or_callback: types.Message | types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.clear()
        await state.set_state(UserStates.main_menu)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard = create_main_menu_keyboard()

        welcome_text = (
            f"{settings.welcome_message}\n\n"
            f"–ú—ã –ø–æ–Ω–∏–º–∞–µ–º, –∫–∞–∫ –≤–∞–∂–Ω–æ –¥–ª—è –≤–∞—Å –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–ª—É—Ö–µ. "
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏ –º—ã –ø–æ–º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
        )

        if isinstance(message_or_callback, types.CallbackQuery):
            await message_or_callback.message.edit_text(
                text=welcome_text,
                reply_markup=keyboard,
                parse_mode=settings.parse_mode,
                disable_web_page_preview=settings.disable_web_page_preview,
            )
            await message_or_callback.answer()
        else:
            await message_or_callback.answer(
                text=welcome_text,
                reply_markup=keyboard,
                parse_mode=settings.parse_mode,
                disable_web_page_preview=settings.disable_web_page_preview,
            )

    except Exception as e:
        logger.error(f"Error in start handler: {e}")

        error_text = settings.error_message

        if isinstance(message_or_callback, types.CallbackQuery):
            try:
                await message_or_callback.message.edit_text(error_text)
                await message_or_callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
            except Exception:
                pass
        else:
            try:
                await message_or_callback.answer(error_text)
            except Exception:
                pass


@router.callback_query(F.data.in_(["path_child", "path_adult"]))
async def select_path_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—É—Ç–∏ (—Ä–µ–±–µ–Ω–æ–∫/–≤–∑—Ä–æ—Å–ª—ã–π)."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º telegram_user_id –∏–∑ —Å–æ–±—ã—Ç–∏—è
        telegram_user_id = callback.from_user.id

        path_type = callback.data
        path_text = "—Ä–µ–±–µ–Ω–∫–∞" if path_type == "path_child" else "—Å–≤–æ–µ–≥–æ"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É—Ç—å
        await state.set_state(UserStates.selected_path)
        await state.update_data(path_type=path_type)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é (–≥–ª–∞–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã)
        menu_items = await menu_service.get_menu_items(telegram_user_id=telegram_user_id, parent_id=None)

        if not menu_items:
            await callback.message.edit_text(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode=settings.parse_mode,
            )
            await callback.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", show_alert=True)
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—É–Ω–∫—Ç–∞–º–∏ –º–µ–Ω—é
        keyboard = create_menu_keyboard(menu_items)

        message_text = (
            f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {path_text} —Å–ª—É—Ö–µ\n\n" f"üîç –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"
        )

        await callback.message.edit_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode=settings.parse_mode,
            disable_web_page_preview=settings.disable_web_page_preview,
        )

        await callback.answer()

    except APIClientError as e:
        logger.error(f"API error in select_path_handler: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é", show_alert=True)

    except Exception as e:
        logger.error(f"Error in select_path_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "back")
async def back_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º telegram_user_id –∏–∑ —Å–æ–±—ã—Ç–∏—è
        telegram_user_id = callback.from_user.id

        current_state = await state.get_state()
        state_data = await state.get_data()

        if current_state == UserStates.selected_path:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—É—Ç–∏
            await callback.message.edit_text(
                text=settings.welcome_message,
                reply_markup=create_main_menu_keyboard(),
                parse_mode=settings.parse_mode,
                disable_web_page_preview=settings.disable_web_page_preview,
            )
            await state.set_state(UserStates.main_menu)

        elif current_state == UserStates.menu_navigation:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —É—Ä–æ–≤–Ω—é –º–µ–Ω—é
            parent_id = state_data.get("parent_id")

            if parent_id is None:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—É—Ç–∏
                await callback.message.edit_text(
                    text=settings.welcome_message,
                    reply_markup=create_main_menu_keyboard(),
                    parse_mode=settings.parse_mode,
                    disable_web_page_preview=settings.disable_web_page_preview,
                )
                await state.set_state(UserStates.main_menu)
            else:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é
                menu_items = await menu_service.get_menu_items(telegram_user_id=telegram_user_id, parent_id=parent_id)

                if menu_items:
                    keyboard = create_menu_keyboard(menu_items)
                    await callback.message.edit_text(
                        text="üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                        reply_markup=keyboard,
                        parse_mode=settings.parse_mode,
                        disable_web_page_preview=settings.disable_web_page_preview,
                    )
                else:
                    await callback.message.edit_text(
                        text="‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é",
                        reply_markup=create_main_menu_keyboard(),
                        parse_mode=settings.parse_mode,
                    )
                    await state.set_state(UserStates.main_menu)

        await callback.answer()

    except Exception as e:
        logger.error(f"Error in back_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
