import asyncio
import logging
import os
import signal
import sys
from pathlib import Path

from aiogram import Bot, Dispatcher
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
from handlers import router

load_dotenv(dotenv_path=Path(__file__).resolve().parent.parent / ".env")

BOT_TOKEN = os.getenv("BOT_TOKEN")

LOG_DIR = os.path.join(os.path.dirname(__file__), "..", "logs")
LOG_FILE = os.path.join(LOG_DIR, "bot_errors.log")

os.makedirs(LOG_DIR, exist_ok=True)

# –î–æ–±–∞–≤–ª—è–µ–º PyLogPath –≤ PYTHONPATH –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ backend –º–æ–¥—É–ª–µ–π
backend_path = os.path.join(os.path.dirname(__file__), "..", "backend")
if backend_path not in sys.path:
    sys.path.insert(0, backend_path)


def check_tokens():
    """Check if all required environment variables are set"""
    missing_tokens = [
        name
        for name, value in {
            "TOKEN": BOT_TOKEN,
        }.items()
        if not value
    ]
    if missing_tokens:
        logging.critical(
            f'–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: \
                         {", ".join(missing_tokens)}'
        )
    return not missing_tokens


bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
dp.include_router(router)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
scheduler = AsyncIOScheduler()


def setup_scheduler():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ MVP –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ 10:00."""
    try:
        from scheduler_tasks import (
            send_reminders_cron,
            cleanup_old_notifications,
            notification_statistics_report,
            health_check_notifications,
        )
        
        # MVP –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ 10:00 —É—Ç—Ä–∞
        scheduler.add_job(
            send_reminders_cron,
            trigger="cron",
            hour=10,
            minute=0,
            timezone="Europe/Moscow",  # UTC+3 –¥–ª—è –†–æ—Å—Å–∏–∏
            id="mvp_send_reminders",
            name="MVP: –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 10:00",
            max_instances=1,
            replace_existing=True,
        )
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º –≤ 3:00
        scheduler.add_job(
            cleanup_old_notifications,
            trigger="cron",
            day_of_week="sun",
            hour=3,
            minute=0,
            timezone="Europe/Moscow",
            id="mvp_cleanup_notifications",
            name="MVP: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            max_instances=1,
            replace_existing=True,
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 20:00
        scheduler.add_job(
            notification_statistics_report,
            trigger="cron",
            hour=20,
            minute=0,
            timezone="Europe/Moscow",
            id="mvp_notification_stats",
            name="MVP: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            max_instances=1,
            replace_existing=True,
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–∞–∂–¥—ã–π —á–∞—Å
        scheduler.add_job(
            health_check_notifications,
            trigger="interval",
            minutes=60,
            id="mvp_health_check",
            name="MVP: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã",
            max_instances=1,
            replace_existing=True,
        )
        
        logging.info("üìÖ MVP –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 10:00")
        
    except ImportError as e:
        logging.error(f"‚ùå MVP: –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–¥–∞—á: {str(e)}")
        raise




async def main():
    """–ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏."""
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏...")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    try:
        setup_scheduler()
        scheduler.start()
        print("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await bot.delete_webhook(drop_pending_updates=True)
    polling_task = asyncio.create_task(
        dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    )

    def shutdown():
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã."""
        print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
        scheduler.shutdown(wait=False)
        polling_task.cancel()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    for sig in (signal.SIGINT, signal.SIGTERM):
        asyncio.get_event_loop().add_signal_handler(sig, shutdown)

    try:
        await polling_task
    except asyncio.CancelledError:
        print("‚úÖ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
    finally:
        scheduler.shutdown()


console_handler = logging.StreamHandler(sys.stdout)
console_handler.setLevel(logging.DEBUG)

file_handler = logging.FileHandler(LOG_FILE, encoding="utf-8")
file_handler.setLevel(logging.ERROR)

formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")

console_handler.setFormatter(formatter)
file_handler.setFormatter(formatter)

if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG, handlers=[console_handler, file_handler])
    asyncio.run(main())
