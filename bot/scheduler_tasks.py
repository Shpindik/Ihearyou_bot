"""MVP: –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""

import os
import aiohttp
from datetime import datetime, timezone
from typing import List, Dict, Optional
from telegram import Bot
from telegram.error import (
    BadRequest,
    Forbidden,
    NetworkError,
    TelegramError,
    TimedOut,
    Unauthorized,
)


async def send_reminders_cron():
    """MVP: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ 10:00 —É—Ç—Ä–∞.
    
    –õ–æ–≥–∏–∫–∞:
    1. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ Bot API
    2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    3. –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram Bot API
    """
    try:
        bot_token = os.getenv("BOT_TOKEN")
        api_base_url = os.getenv("API_BASE_URL", "http://bot_api:8000/api/v1")
        
        if not bot_token:
            print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        bot = Bot(token=bot_token)
        
        async with aiohttp.ClientSession() as session:
            print("üéØ MVP: –ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
            
            # –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            template_data = await _get_active_template(session, api_base_url)
            if not template_data:
                print("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            print(f"üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à–∞–±–ª–æ–Ω: '{template_data['name']}'")
            
            # –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            inactive_users = await _get_inactive_users(session, api_base_url)
            if not inactive_users:
                print("‚úÖ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
                
            print(f"üë• –ù–∞–π–¥–µ–Ω–æ {len(inactive_users)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            sent_count = 0
            failed_count = 0
            
            for user in inactive_users:
                try:
                    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    personalized_message = _personalize_message(
                        template_data['message_template'], 
                        user['first_name']
                    )
                    
                    await bot.send_message(
                        chat_id=user['telegram_user_id'],
                        text=personalized_message,
                        parse_mode="HTML"
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    await _update_reminder_status(session, api_base_url, user['telegram_user_id'])
                    
                    sent_count += 1
                    print(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user['first_name']}")
                    
                except Forbidden:
                    failed_count += 1
                    print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['first_name']} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                    
                except (BadRequest, NetworkError, TimedOut) as e:
                    failed_count += 1
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {user['first_name']}: {e}")
                    
                except Exception as e:
                    failed_count += 1
                    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {user['first_name']}: {e}")
            
            print(f"üéâ MVP –ó–∞–≤–µ—Ä—à–µ–Ω–æ: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count}, –æ—à–∏–±–æ–∫ {failed_count}")
                
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ send_reminders_cron: {e}")
        import traceback
        traceback.print_exc()


async def _get_active_template(session: aiohttp.ClientSession, api_base_url: str) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —à–∞–±–ª–æ–Ω —á–µ—Ä–µ–∑ API."""
    try:
        url = f"{api_base_url}/telegram-user/active-template"
        
        async with session.get(url) as response:
            if response.status == 200:
                template_data = await response.json()
                return template_data
            elif response.status == 404:
                print("‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return None
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {response.status}")
                return None
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —à–∞–±–ª–æ–Ω–∞: {e}")
        return None


async def _get_inactive_users(session: aiohttp.ClientSession, api_base_url: str) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API."""
    try:
        url = f"{api_base_url}/telegram-user/inactive-users"
        params = {
            "inactive_days": 10,  # –ù–µ–∞–∫—Ç–∏–≤–µ–Ω –±–æ–ª–µ–µ 10 –¥–Ω–µ–π
            "days_since_last_reminder": 7  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—ã–ª–æ –±–æ–ª–µ–µ 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        }
        
        async with session.get(url, params=params) as response:
            if response.status == 200:
                users_data = await response.json()
                return users_data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {response.status}")
                return []
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []


def _personalize_message(template: str, first_name: str) -> str:
    """–ü—Ä–æ—Å—Ç–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è."""
    return template.replace("{first_name}", first_name)


async def _update_reminder_status(session: aiohttp.ClientSession, api_base_url: str, telegram_user_id: int) -> None:
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        url = f"{api_base_url}/telegram-user/update-reminder-status"
        params = {"telegram_user_id": telegram_user_id}
        
        async with session.post(url, params=params) as response:
            if response.status == 200:
                print(f"üìù –°—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id}")
            else:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id}: {response.status}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id}: {e}")


async def cleanup_old_notifications():
    """MVP: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ API."""
    print("üßπ MVP: –ó–∞–ø—Ä–æ—Å –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    try:
        api_base_url = os.getenv("API_BASE_URL", "http://bot_api:8000/api/v1")
        
        async with aiohttp.ClientSession() as session:
            # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è —ç—Ç–æ–≥–æ –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π endpoint
            # –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è MVP
            print("‚úÖ MVP: –û—á–∏—Å—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∑–∞–≥–ª—É—à–∫–∞)")
            
    except Exception as e:
        print(f"‚ùå MVP: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")


async def notification_statistics_report():
    """MVP: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ API."""
    print("üìä MVP: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    try:
        api_base_url = os.getenv("API_BASE_URL", "http://bot_api:8000/api/v1")
        
        async with aiohttp.ClientSession() as session:
            # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è —ç—Ç–æ–≥–æ –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π endpoint
            print("‚úÖ MVP: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞)")
            
    except Exception as e:
        print(f"‚ùå MVP: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


async def health_check_notifications():
    """MVP: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    print("üîç MVP: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        bot_token = os.getenv("BOT_TOKEN")
        if not bot_token:
            print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º API
        bot = Bot(token=bot_token)
        bot_info = await bot.get_me()
        print(f"‚úÖ MVP: Telegram Bot API –¥–æ—Å—Ç—É–ø–µ–Ω: @{bot_info.username}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å backend API
        api_base_url = os.getenv("API_BASE_URL", "http://bot_api:8000/api/v1")
        
        async with aiohttp.ClientSession() as session:
            url = f"{api_base_url}/telegram-user/inactive-users"
            params = {"inactive_days": 1, "days_since_last_reminder": 1}
            
            async with session.get(url, params=params) as response:
                if response.status in [200, 404]:
                    print("‚úÖ MVP: Backend API –¥–æ—Å—Ç—É–ø–µ–Ω")
                    return True
                else:
                    print(f"‚ö†Ô∏è MVP: Backend API –æ—Ç–≤–µ—á–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π: {response.status}")
                    return False
        
    except Exception as e:
        print(f"‚ùå MVP: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        return False