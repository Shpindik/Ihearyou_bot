"""–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""

import logging
from typing import Any, Dict, Optional

from aiogram import types
from aiogram.exceptions import TelegramBadRequest

from ..config import settings


logger = logging.getLogger(__name__)


class ContentHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""

    @staticmethod
    async def send_content(
        message_or_callback: types.Message | types.CallbackQuery, content_data: Dict[str, Any]
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞.

        Args:
            message_or_callback: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback query
            content_data: –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ API

        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        content_type = content_data.get("content_type")

        if not content_type:
            logger.warning("Content type not specified")
            return False

        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å - –≤ —á–∞—Ç –∏–ª–∏ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ callback
            if isinstance(message_or_callback, types.CallbackQuery):
                bot = message_or_callback.bot
                chat_id = message_or_callback.message.chat.id
                message_id = message_or_callback.message.message_id
            else:
                bot = message_or_callback.bot
                chat_id = message_or_callback.chat.id
                message_id = None

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if content_type == "text":
                await ContentHandler._send_text_content(bot, chat_id, content_data, message_id)
            elif content_type == "photo":
                await ContentHandler._send_photo_content(bot, chat_id, content_data, message_id)
            elif content_type == "video":
                await ContentHandler._send_video_content(bot, chat_id, content_data, message_id)
            elif content_type == "document":
                await ContentHandler._send_document_content(bot, chat_id, content_data, message_id)
            elif content_type in ["youtube_url", "vk_url", "external_url"]:
                await ContentHandler._send_url_content(bot, chat_id, content_data, message_id)
            elif content_type == "web_app":
                await ContentHandler._send_webapp_content(bot, chat_id, content_data, message_id)
            else:
                logger.warning(f"Unknown content type: {content_type}")
                return False

            return True

        except Exception as e:
            logger.error(f"Error sending content: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                error_message = (
                    "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )

                if isinstance(message_or_callback, types.CallbackQuery):
                    await message_or_callback.message.edit_text(error_message, parse_mode=settings.parse_mode)
                else:
                    await bot.send_message(chat_id=chat_id, text=error_message)

            except Exception as send_error:
                logger.error(f"Failed to send error message: {send_error}")

            return False

    @staticmethod
    async def _send_text_content(bot, chat_id: int, content_data: Dict[str, Any], message_id: Optional[int]) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç."""
        text_content = content_data.get("text_content", "")

        if not text_content:
            text_content = "–¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø—É—Å—Ç."

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML
        text_content = ContentHandler._escape_html(text_content)

        if message_id:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text_content,
                parse_mode=settings.parse_mode,
                disable_web_page_preview=settings.disable_web_page_preview,
            )
        else:
            await bot.send_message(
                chat_id=chat_id,
                text=text_content,
                parse_mode=settings.parse_mode,
                disable_web_page_preview=settings.disable_web_page_preview,
            )

    @staticmethod
    async def _send_photo_content(bot, chat_id: int, content_data: Dict[str, Any], message_id: Optional[int]) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç."""
        telegram_file_id = content_data.get("telegram_file_id")
        caption = content_data.get("caption", "")

        if not telegram_file_id:
            logger.warning("Telegram file ID not specified for photo")
            return

        caption = ContentHandler._escape_html(caption)

        if message_id:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
            try:
                await bot.edit_message_media(
                    chat_id=chat_id,
                    message_id=message_id,
                    media=types.InputMediaPhoto(
                        media=telegram_file_id, caption=caption, parse_mode=settings.parse_mode
                    ),
                )
            except TelegramBadRequest:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ –∑–∞–º–µ–Ω–∏–ª–æ—Å—å –Ω–∞ —Ç–µ–∫—Å—Ç),
                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.send_photo(
                    chat_id=chat_id, photo=telegram_file_id, caption=caption, parse_mode=settings.parse_mode
                )
        else:
            await bot.send_photo(
                chat_id=chat_id, photo=telegram_file_id, caption=caption, parse_mode=settings.parse_mode
            )

    @staticmethod
    async def _send_video_content(bot, chat_id: int, content_data: Dict[str, Any], message_id: Optional[int]) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–Ω—Ç."""
        telegram_file_id = content_data.get("telegram_file_id")
        caption = content_data.get("caption", "")

        if not telegram_file_id:
            logger.warning("Telegram file ID not specified for video")
            return

        caption = ContentHandler._escape_html(caption)

        if message_id:
            try:
                await bot.edit_message_media(
                    chat_id=chat_id,
                    message_id=message_id,
                    media=types.InputMediaVideo(
                        media=telegram_file_id, caption=caption, parse_mode=settings.parse_mode
                    ),
                )
            except TelegramBadRequest:
                await bot.send_video(
                    chat_id=chat_id, video=telegram_file_id, caption=caption, parse_mode=settings.parse_mode
                )
        else:
            await bot.send_video(
                chat_id=chat_id, video=telegram_file_id, caption=caption, parse_mode=settings.parse_mode
            )

    @staticmethod
    async def _send_document_content(
        bot, chat_id: int, content_data: Dict[str, Any], message_id: Optional[int]
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç."""
        telegram_file_id = content_data.get("telegram_file_id")
        caption = content_data.get("caption", "")

        if not telegram_file_id:
            logger.warning("Telegram file ID not specified for document")
            return

        caption = ContentHandler._escape_html(caption)

        if message_id:
            try:
                await bot.edit_message_media(
                    chat_id=chat_id,
                    message_id=message_id,
                    media=types.InputMediaDocument(
                        media=telegram_file_id, caption=caption, parse_mode=settings.parse_mode
                    ),
                )
            except TelegramBadRequest:
                await bot.send_document(
                    chat_id=chat_id, document=telegram_file_id, caption=caption, parse_mode=settings.parse_mode
                )
        else:
            await bot.send_document(
                chat_id=chat_id, document=telegram_file_id, caption=caption, parse_mode=settings.parse_mode
            )

    @staticmethod
    async def _send_url_content(bot, chat_id: int, content_data: Dict[str, Any], message_id: Optional[int]) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç."""
        external_url = content_data.get("external_url")
        caption = content_data.get("caption", "")

        if not external_url:
            logger.warning("External URL not specified")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        content_type = content_data.get("content_type")

        if content_type == "youtube_url":
            emoji = "üé•"
            text = f"{emoji} YouTube –≤–∏–¥–µ–æ:\n{external_url}"
        elif content_type == "vk_url":
            emoji = "üìπ"
            text = f"{emoji} VK –≤–∏–¥–µ–æ:\n{external_url}"
        else:
            emoji = "üîó"
            text = f"{emoji} –í–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞:\n{external_url}"

        if caption:
            caption_html = ContentHandler._escape_html(caption)
            text = f"{caption_html}\n\n{text}"

        if message_id:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text,
                parse_mode=settings.parse_mode,
                disable_web_page_preview=False,  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è —Å—Å—ã–ª–æ–∫
            )
        else:
            await bot.send_message(
                chat_id=chat_id, text=text, parse_mode=settings.parse_mode, disable_web_page_preview=False
            )

    @staticmethod
    async def _send_webapp_content(bot, chat_id: int, content_data: Dict[str, Any], message_id: Optional[int]) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Web App –∫–æ–Ω—Ç–µ–Ω—Ç."""
        web_app_short_name = content_data.get("web_app_short_name")
        external_url = content_data.get("external_url")
        caption = content_data.get("caption", "")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º external_url –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ web_app_short_name
        web_app_url = external_url or web_app_short_name

        if not web_app_url:
            logger.warning("Web App URL not specified")
            return

        # –ï—Å–ª–∏ –Ω–µ HTTPS URL, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—É—é —Å—Å—ã–ª–∫—É
        if not web_app_url.startswith("http://") and not web_app_url.startswith("https://"):
            logger.warning(f"Non-HTTP URL for Web App: {web_app_url}, sending as text link")
            text = f"üîó –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {web_app_url}"

            if caption:
                caption_html = ContentHandler._escape_html(caption)
                text = f"{caption_html}\n\n{text}"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ –∫–Ω–æ–ø–∫–∏
            keyboard = None
        else:
            text = f"üåê –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {web_app_short_name or 'Web App'}"

            if caption:
                caption_html = ContentHandler._escape_html(caption)
                text = f"{caption_html}\n\n{text}"

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É Web App —Å HTTPS URL
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=types.WebAppInfo(url=web_app_url)
                        )
                    ]
                ]
            )

        send_kwargs = {
            "text": text,
            "parse_mode": settings.parse_mode,
            "disable_web_page_preview": settings.disable_web_page_preview,
        }

        if keyboard:
            send_kwargs["reply_markup"] = keyboard

        if message_id:
            await bot.edit_message_text(chat_id=chat_id, message_id=message_id, **send_kwargs)
        else:
            await bot.send_message(chat_id=chat_id, **send_kwargs)

    @staticmethod
    def _escape_html(text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML —Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram."""
        if not text:
            return ""

        return text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;").replace('"', "&quot;")
