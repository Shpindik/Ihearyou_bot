"""–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä Telegram –±–æ—Ç–∞."""

from typing import List, Optional

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from ..config import settings


def create_rating_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (1-5 –∑–≤–µ–∑–¥)."""
    builder = InlineKeyboardBuilder()

    for i in range(1, 6):
        builder.button(text=f"{settings.emoji_rating} {i}", callback_data=f"rate_{i}")

    builder.adjust(5)  # 5 –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥
    return builder.as_markup()


def create_menu_keyboard(items: List[dict]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—É–Ω–∫—Ç–∞–º–∏ –º–µ–Ω—é.

    Args:
        items: –°–ø–∏—Å–æ–∫ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é –∏–∑ API
    """
    builder = InlineKeyboardBuilder()

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é
    if items:
        for item in items:
            emoji = "üìÇ" if item.get("item_type") == "navigation" else "üìÑ"
            text = f"{emoji} {item['title']}"

            builder.button(
                text=text[:64],  # Telegram –ª–∏–º–∏—Ç –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
                callback_data=f"menu_{item['id']}",
            )

    # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    builder.button(text=f"{settings.emoji_search} –ü–æ–∏—Å–∫", callback_data="search")
    builder.button(text=f"{settings.emoji_question} –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder.button(text=f"{settings.emoji_back} –ù–∞–∑–∞–¥", callback_data="back")
    builder.button(text=f"{settings.emoji_home} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")

    builder.adjust(1)  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    return builder.as_markup()


def create_back_menu_keyboard(parent_id: Optional[int] = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."""
    builder = InlineKeyboardBuilder()

    if parent_id:
        builder.button(text=f"{settings.emoji_back} –ù–∞–∑–∞–¥", callback_data=f"menu_{parent_id}")

    builder.button(text=f"{settings.emoji_home} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")

    builder.button(text=f"{settings.emoji_search} –ü–æ–∏—Å–∫", callback_data="search")

    return builder.as_markup()


def create_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    builder = InlineKeyboardBuilder()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é
    builder.button(text="üß∏ –Ø –≤–æ–ª–Ω—É—é—Å—å –æ —Å–ª—É—Ö–µ —Ä–µ–±–µ–Ω–∫–∞", callback_data="path_child")
    builder.button(text="üë§ –Ø –≤–æ–ª–Ω—É—é—Å—å –æ —Å–≤–æ–µ–º —Å–ª—É—Ö–µ", callback_data="path_adult")

    # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    builder.button(text=f"{settings.emoji_search} –ü–æ–∏—Å–∫", callback_data="search")
    builder.button(text=f"{settings.emoji_question} –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")

    builder.adjust(1)
    return builder.as_markup()


def create_content_actions_keyboard(menu_item_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∞ –æ—Ü–µ–Ω–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    builder.button(text=f"{settings.emoji_rating} –û—Ü–µ–Ω–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data=f"content_rating_{menu_item_id}")

    # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    builder.button(text=f"{settings.emoji_search} –ü–æ–∏—Å–∫", callback_data="search")
    builder.button(text=f"{settings.emoji_question} –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    builder.button(text=f"{settings.emoji_back} –ù–∞–∑–∞–¥", callback_data=f"content_menu_{menu_item_id}")
    builder.button(text=f"{settings.emoji_home} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")

    builder.adjust(1)
    return builder.as_markup()


def create_confirmation_keyboard(prefix: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    builder = InlineKeyboardBuilder()

    builder.button(text="‚úÖ –î–∞", callback_data=f"{prefix}_yes")
    builder.button(text="‚ùå –ù–µ—Ç", callback_data=f"{prefix}_no")

    builder.adjust(1)
    return builder.as_markup()


def create_search_results_keyboard(results: List[dict]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞."""
    builder = InlineKeyboardBuilder()

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    if results:
        for i, result in enumerate(results, 1):
            text = f"{i}. {result['title'][:50]}"
            builder.button(text=text, callback_data=f"search_result_{result['id']}")
    else:
        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        builder.button(text="üìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", callback_data="no_results")

    # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    builder.button(text=f"{settings.emoji_search} –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search")
    builder.button(text=f"{settings.emoji_question} –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    builder.button(text=f"{settings.emoji_back} –ù–∞–∑–∞–¥", callback_data="back")
    builder.button(text=f"{settings.emoji_home} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")

    builder.adjust(1)
    return builder.as_markup()


def create_search_pagination_keyboard(
    current_page: int, total_pages: int, search_query: str, existing_keyboard: InlineKeyboardMarkup
) -> InlineKeyboardMarkup:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –ø–æ–∏—Å–∫–∞."""
    if total_pages <= 1:
        return existing_keyboard

    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫
    keyboard_rows = existing_keyboard.inline_keyboard.copy()

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    pagination_row = []

    if current_page > 1:
        pagination_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"search_page_{current_page - 1}"))

    pagination_row.append(InlineKeyboardButton(text=f"{current_page}/{total_pages}", callback_data="search_info"))

    if current_page < total_pages:
        pagination_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"search_page_{current_page + 1}"))

    keyboard_rows.append(pagination_row)

    return InlineKeyboardMarkup(inline_keyboard=keyboard_rows)


def create_pagination_keyboard(
    current_page: int, total_pages: int, callback_prefix: str, extra_buttons: Optional[List[tuple]] = None
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    builder = InlineKeyboardBuilder()

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if total_pages > 1:
        navigation_buttons = []

        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
        if current_page > 1:
            navigation_buttons.append(
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"{callback_prefix}_page_{current_page - 1}")
            )

        # –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        navigation_buttons.append(
            InlineKeyboardButton(text=f"{current_page}/{total_pages}", callback_data=f"{callback_prefix}_info")
        )

        # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è"
        if current_page < total_pages:
            navigation_buttons.append(
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"{callback_prefix}_page_{current_page + 1}")
            )

        builder.row(*navigation_buttons)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    if extra_buttons:
        for text, callback_data in extra_buttons:
            builder.button(text=text, callback_data=callback_data)

    # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    builder.button(text=f"{settings.emoji_search} –ü–æ–∏—Å–∫", callback_data="search")
    builder.button(text=f"{settings.emoji_question} –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    builder.button(text=f"{settings.emoji_back} –ù–∞–∑–∞–¥", callback_data="back")
    builder.button(text=f"{settings.emoji_home} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")

    builder.adjust(1)
    return builder.as_markup()


def escape_html(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML –≤ —Ç–µ–∫—Å—Ç–µ –¥–ª—è Telegram."""
    if not text:
        return ""

    return text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
