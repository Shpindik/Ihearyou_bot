"""–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π."""

import logging
from typing import Any, Dict, List, Optional

from ..utils.api_client import APIClientError, api_client


logger = logging.getLogger(__name__)


class MenuService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π."""

    async def get_menu_items(self, telegram_user_id: int, parent_id: Optional[int] = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            telegram_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            parent_id: ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é (None –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è)

        Returns:
            –°–ø–∏—Å–æ–∫ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
        """
        try:
            params = {"telegram_user_id": telegram_user_id}
            if parent_id is not None:
                params["parent_id"] = parent_id

            async with api_client as client:
                response = await client._make_request(method="GET", endpoint="api/v1/public/menu-items/", params=params)

                return response.get("items", [])

        except APIClientError as e:
            logger.error(f"API error getting menu items: {e}")
            raise
        except Exception as e:
            logger.error(f"Unexpected error getting menu items: {e}")
            raise

    async def get_menu_content(self, telegram_user_id: int, menu_item_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é.

        Args:
            telegram_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            menu_item_id: ID –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é

        Returns:
            –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        try:
            params = {"telegram_user_id": telegram_user_id}

            async with api_client as client:
                response = await client._make_request(
                    method="GET", endpoint=f"api/v1/public/menu-items/{menu_item_id}/content", params=params
                )

                return response

        except APIClientError as e:
            logger.error(f"API error getting menu content: {e}")
            if "404" in str(e):
                return None
            raise
        except Exception as e:
            logger.error(f"Unexpected error getting menu content: {e}")
            raise

    async def send_content_user(
        self,
        menu_content: Dict[str, Any],
        message_or_callback: Any,  # Message –∏–ª–∏ CallbackQuery
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

        Args:
            menu_content: –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ API
            message_or_callback: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback query

        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        from aiogram import types

        from ..utils.content_handlers import ContentHandler

        try:
            content_files = menu_content.get("content_files", [])

            if not content_files:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –Ω–æ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                description = menu_content.get("description", "")
                bot_message = menu_content.get("bot_message", "")

                content_text = bot_message or description or "–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"

                if isinstance(message_or_callback, types.CallbackQuery):
                    await message_or_callback.message.edit_text(
                        text=content_text, parse_mode="HTML", disable_web_page_preview=True
                    )
                else:
                    await message_or_callback.answer(
                        text=content_text, parse_mode="HTML", disable_web_page_preview=True
                    )

                return True

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (–ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª)
            main_content = content_files[0]
            success = await ContentHandler.send_content(message_or_callback, main_content)

            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(content_files) > 1 and success:
                chat_id = self._get_chat_id(message_or_callback)
                bot = self._get_bot(message_or_callback)

                for additional_content in content_files[1:]:
                    try:
                        if isinstance(message_or_callback, types.CallbackQuery):
                            additional_message = await bot.send_message(
                                chat_id=chat_id, text="üìé –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª:"
                            )
                            await ContentHandler.send_content(additional_message, additional_content)
                        else:
                            await ContentHandler.send_content(message_or_callback, additional_content)
                    except Exception as e:
                        logger.error(f"Error sending additional content: {e}")

            return success

        except Exception as e:
            logger.error(f"Error sending content to user: {e}")
            return False

    def _get_chat_id(self, message_or_callback) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç chat_id –∏–∑ –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback."""
        if hasattr(message_or_callback, "chat"):
            return message_or_callback.chat.id
        elif hasattr(message_or_callback, "message"):
            return message_or_callback.message.chat.id
        else:
            return message_or_callback.from_user.id

    def _get_bot(self, message_or_callback):
        """–ü–æ–ª—É—á–∞–µ—Ç –±–æ—Ç–∞ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback."""
        return getattr(message_or_callback, "bot", None) or message_or_callback.bot

    async def search_materials(
        self, telegram_user_id: int, query: str, limit: int = 10, page: int = 1
    ) -> List[Dict[str, Any]]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.

        Args:
            telegram_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã

        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        """
        try:
            params = {"telegram_user_id": telegram_user_id, "query": query, "limit": limit}

            async with api_client as client:
                response = await client._make_request(method="GET", endpoint="api/v1/public/search/", params=params)

                return response.get("items", [])

        except APIClientError as e:
            logger.error(f"API error searching materials: {e}")
            raise
        except Exception as e:
            logger.error(f"Unexpected error searching materials: {e}")
            raise
