services:
  db:
    container_name: IHearYouDB
    image: postgres:13
    env_file: .env
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    container_name: IHearYouRedis
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Telegram Bot
  bot:
    build:
      context: .
      target: bot
    container_name: IHearYouTelegramBot
    env_file: .env
    environment:
      BOT_TOKEN: ${BOT_TOKEN}
      API_BASE_URL: http://bot_api:8000
      WEBHOOK_URL: ${WEBHOOK_URL:-}
      WEBHOOK_SECRET: ${WEBHOOK_SECRET:-}
      INACTIVE_DAYS_THRESHOLD: ${INACTIVE_DAYS_THRESHOLD:-10}
      REMINDER_COOLDOWN_DAYS: ${REMINDER_COOLDOWN_DAYS:-10}
      API_TIMEOUT: ${API_TIMEOUT:-30}
      API_MAX_RETRIES: ${API_MAX_RETRIES:-3}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
      bot_api:
        condition: service_healthy
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Waiting for API to be ready...' &&
        sleep 10 &&
        echo 'Starting Telegram Bot...' &&
        python -m bot.main
      "
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    develop:
      watch:
        - action: rebuild
          path: ./bot
        - action: rebuild
          path: ./pyproject.toml
        - action: rebuild
          path: ./Dockerfile

  # FastAPI Backend  
  bot_api:
    build:
      context: .
      target: admin
    container_name: IHearYouAdminAPI
    env_file: .env
    environment:
      ADMIN_SECRET_KEY: ${ADMIN_SECRET_KEY:-changeme}
      BOT_TOKEN: ${BOT_TOKEN}
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@db:5432/ihearyou
      REDIS_URL: redis://redis:6379/0
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${BOT_API_PORT:-8001}:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 5 &&
        echo 'Running migrations...' &&
        alembic upgrade head &&
        echo 'Starting API server...' &&
        uvicorn backend.main:app --host 0.0.0.0 --port 8000
      "
    develop:
      watch:
        - action: rebuild
          path: ./backend
        - action: rebuild
          path: ./pyproject.toml
        - action: rebuild
          path: ./Dockerfile

  # React Frontend
  frontend:
    build:
      context: .
      target: frontend
    container_name: IHearYouFrontend
    env_file: .env
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8001/api}
      NODE_ENV: ${NODE_ENV:-production}
    depends_on:
      bot_api:
        condition: service_healthy
    ports:
      - "${FRONTEND_PORT:-3001}:3001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped


volumes:
  pg_data:
  redis_data: